{"version":3,"file":"blocks/form/frontend.js","mappings":";;;;AAAAA,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,YAAY;EACxD,MAAMC,SAAS,GAAGF,QAAQ,CAACG,gBAAgB,CAAC,oBAAoB,CAAC;EACjE,IAAID,SAAS,CAACE,MAAM,GAAG,CAAC,EAAE;IACxBF,SAAS,CAACG,OAAO,CAAEC,IAAI,IAAK;MAC1B,MAAMC,SAAS,GAAGD,IAAI,CAACE,OAAO,CAACC,SAAS,IAAI,MAAM;MAElD,IAAIF,SAAS,EAAE;QACb;MACF;MAEA,MAAMG,uBAAuB,GAAGA,CAACJ,IAAI,EAAEK,OAAO,GAAG,EAAE,KAAK;QACtD,IAAIC,eAAe,GAAGN,IAAI,CAACO,aAAa,CAAC,wBAAwB,CAAC;QAClE,IAAID,eAAe,IAAID,OAAO,KAAK,CAAC,EAAE;UACpCG,iBAAiB,CAACR,IAAI,CAAC;QACzB,CAAC,MAAM;UACLS,UAAU,CAAC,MAAM;YACfL,uBAAuB,CAACJ,IAAI,EAAEK,OAAO,GAAG,CAAC,CAAC;UAC5C,CAAC,EAAE,EAAE,CAAC;QACR;MACF,CAAC;MACD;MACAD,uBAAuB,CAACJ,IAAI,CAAC;IAC/B,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,SAASQ,iBAAiBA,CAACR,IAAI,EAAE;EAC/B,MAAMU,MAAM,GAAGV,IAAI,CAACE,OAAO,CAACQ,MAAM;EAClC,IAAIC,mBAAmB,GAAGX,IAAI,CAACY,UAAU,CAACL,aAAa,CAAC,gBAAgB,CAAC;EACzE,IAAIM,UAAU,GAAGb,IAAI,CAACY,UAAU,CAACL,aAAa,CAAC,gBAAgB,CAAC;EAChE,MAAMO,QAAQ,GAAGd,IAAI,CAACY,UAAU,CAACL,aAAa,CAAC,iBAAiB,CAAC;;EAEjE;EACA,IAAIQ,QAAQ,GAAG,IAAIC,QAAQ,CAAChB,IAAI,CAAC;;EAEjC;EACA,MAAMiB,MAAM,GAAGjB,IAAI,CAACH,gBAAgB,CAAC,6CAA6C,CAAC;EACnF,IAAIoB,MAAM,CAACnB,MAAM,GAAG,CAAC,EAAE;IACrBmB,MAAM,CAAClB,OAAO,CAAEmB,KAAK,IAAK;MACxB,MAAMC,YAAY,GAAGD,KAAK,CAACE,YAAY,CAAC,gCAAgC,CAAC,IAAI,yBAAyB;MACtGL,QAAQ,CAACM,YAAY,CACnBH,KAAK,EACL,UAAUI,KAAK,EAAE;QACf,IAAIJ,KAAK,CAACK,SAAS,CAACC,QAAQ,CAAC,gBAAgB,CAAC,EAAE;UAC9C,OAAO,KAAK;QACd;QACA,OAAOF,KAAK,CAACG,IAAI,CAAC,CAAC,KAAK,EAAE;MAC5B,CAAC,EACDN,YACF,CAAC;IACH,CAAC,CAAC;EACJ;EAEAnB,IAAI,CAACL,gBAAgB,CAAC,QAAQ,EAAE,UAAU+B,CAAC,EAAE;IAC3CA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAIC,KAAK,GAAGb,QAAQ,CAACc,QAAQ,CAAC,CAAC;IAC/B,IAAID,KAAK,EAAE;MACT,MAAME,QAAQ,GAAG,IAAIC,QAAQ,CAAC/B,IAAI,CAAC;MACnC,MAAMgC,MAAM,GAAG,CAAC,GAAGF,QAAQ,CAACG,OAAO,CAAC,CAAC,CAAC;;MAEtC;MACAD,MAAM,CAACE,IAAI,CAAC,CAAC,QAAQ,EAAExB,MAAM,CAAC,CAAC;;MAE/B;MACAsB,MAAM,CAACE,IAAI,CAAC,CAAC,OAAO,EAAEC,YAAY,CAACC,UAAU,CAAC,CAAC;MAE/C,MAAMC,aAAa,GAAGL,MAAM,CAACM,MAAM,CAAC,CAACC,GAAG,EAAE,CAACC,GAAG,EAAElB,KAAK,CAAC,KAAK;QACzDiB,GAAG,CAACC,GAAG,CAAC,GAAGA,GAAG,KAAK,MAAM,GAAGlB,KAAK,CAACmB,IAAI,GAAGnB,KAAK;QAC9C,OAAOiB,GAAG;MACZ,CAAC,EAAE,CAAC,CAAC,CAAC;MAEN,MAAMG,UAAU,GAAGC,IAAI,CAACC,SAAS,CAACP,aAAa,CAAC;;MAEhD;MACA,MAAMQ,GAAG,GAAG,IAAIC,cAAc,CAAC,CAAC;MAChCD,GAAG,CAACE,IAAI,CAAC,MAAM,EAAEZ,YAAY,CAACa,OAAO,EAAE,IAAI,CAAC;MAC5CH,GAAG,CAACI,gBAAgB,CAAC,cAAc,EAAE,mCAAmC,CAAC;MACzEJ,GAAG,CAACK,kBAAkB,GAAG,YAAY;QACnC,IAAIL,GAAG,CAACM,UAAU,KAAKL,cAAc,CAACM,IAAI,EAAE;UAC1C,IAAIP,GAAG,CAACQ,MAAM,KAAK,GAAG,EAAE;YACtB,MAAMC,QAAQ,GAAGX,IAAI,CAACY,KAAK,CAACV,GAAG,CAACW,YAAY,CAAC;YAC7C,MAAM;cACJC,gBAAgB;cAChBC,iBAAiB;cACjBC,aAAa;cACbC,cAAc;cACdC,UAAU;cACVC,WAAW;cACXC;YACF,CAAC,GAAGT,QAAQ;YACZ,IAAIG,gBAAgB,IAAIM,mBAAmB,EAAE;cAC3ClD,UAAU,CAACmD,SAAS,GAAGN,iBAAiB;cACxC/C,mBAAmB,CAACY,SAAS,CAAC0C,GAAG,CAAC,qBAAqB,EAAE,MAAM,CAAC;YAClE;YACA,IAAIN,aAAa,EAAE;cACjB9C,UAAU,CAACmD,SAAS,GAAGJ,cAAc;cACrCjD,mBAAmB,CAACY,SAAS,CAAC0C,GAAG,CAAC,uBAAuB,EAAE,MAAM,CAAC;YACpE;YACA,IAAIJ,UAAU,EAAE;cACdhD,UAAU,CAACmD,SAAS,GAAGF,WAAW;cAClCnD,mBAAmB,CAACY,SAAS,CAAC0C,GAAG,CAAC,qBAAqB,EAAE,MAAM,CAAC;YAClE;;YAEA;YACAjE,IAAI,CAACkE,KAAK,CAAC,CAAC;;YAEZ;YACAzD,UAAU,CAAC,MAAM;cACfI,UAAU,CAACmD,SAAS,GAAG,EAAE;cACzBrD,mBAAmB,CAACY,SAAS,CAAC4C,MAAM,CAAC,kBAAkB,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,CAAC;YACrF,CAAC,EAAE,IAAI,CAAC;;YAER;YACArD,QAAQ,CAACnB,gBAAgB,CAAC,OAAO,EAAE,YAAY;cAC7CkB,UAAU,CAACmD,SAAS,GAAG,EAAE;cACzBrD,mBAAmB,CAACY,SAAS,CAAC4C,MAAM,CAAC,kBAAkB,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,CAAC;YACrF,CAAC,CAAC;UACJ,CAAC,MAAM;YACLC,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAExB,GAAG,CAACyB,UAAU,CAAC;UACzC;QACF;MACF,CAAC;MAEDzB,GAAG,CAAC0B,IAAI,CAAC,iCAAiC,GAAGC,kBAAkB,CAAC9B,UAAU,CAAC,CAAC;IAC9E;EACF,CAAC,CAAC;AACJ,C","sources":["webpack://zoloblocks/./src/blocks/form/frontend.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', function () {\n  const zoloForms = document.querySelectorAll('.zolo-contact-form');\n  if (zoloForms.length > 0) {\n    zoloForms.forEach((form) => {\n      const reCaptcha = form.dataset.recaptcha == 'true';\n\n      if (reCaptcha) {\n        return;\n      }\n\n      const initializeFormWhenReady = (form, retries = 10) => {\n        let datePickerInput = form.querySelector('.zolo-form-date-picker');\n        if (datePickerInput || retries === 0) {\n          setupFormHandlers(form);\n        } else {\n          setTimeout(() => {\n            initializeFormWhenReady(form, retries - 1);\n          }, 10);\n        }\n      };\n      // Call the function to check for the date picker\n      initializeFormWhenReady(form);\n    });\n  }\n});\n\nfunction setupFormHandlers(form) {\n  const formId = form.dataset.formId;\n  let formNoticeContainer = form.parentNode.querySelector('.zolo-form-msg');\n  let formNotice = form.parentNode.querySelector('.zolo-msg-desc');\n  const closeBtn = form.parentNode.querySelector('.zolo-msg-close');\n\n  // form validation\n  let pristine = new Pristine(form);\n\n  //phone number validation\n  const inputs = form.querySelectorAll('input.invalid-number, input.invalid-country');\n  if (inputs.length > 0) {\n    inputs.forEach((input) => {\n      const errorMessage = input.getAttribute('data-pristine-required-message') || 'This field is required.';\n      pristine.addValidator(\n        input,\n        function (value) {\n          if (input.classList.contains('invalid-number')) {\n            return false;\n          }\n          return value.trim() !== '';\n        },\n        errorMessage\n      );\n    });\n  }\n\n  form.addEventListener('submit', function (e) {\n    e.preventDefault();\n    let valid = pristine.validate();\n    if (valid) {\n      const formData = new FormData(form);\n      const values = [...formData.entries()];\n\n      // add the formId to the data\n      values.push(['formId', formId]);\n\n      // add nonce to the data\n      values.push(['nonce', zoloSettings.zolo_nonce]);\n\n      const formattedData = values.reduce((acc, [key, value]) => {\n        acc[key] = key === 'file' ? value.name : value;\n        return acc;\n      }, {});\n\n      const dataString = JSON.stringify(formattedData);\n\n      // create an ajax request\n      const xhr = new XMLHttpRequest();\n      xhr.open('POST', zoloSettings.ajaxurl, true);\n      xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          if (xhr.status === 200) {\n            const response = JSON.parse(xhr.responseText);\n            const {\n              validationStatus,\n              validationMessage,\n              successStatus,\n              successMessage,\n              failStatus,\n              failMessage,\n              nonceValidationFail,\n            } = response;\n            if (validationStatus || nonceValidationFail) {\n              formNotice.innerHTML = validationMessage;\n              formNoticeContainer.classList.add('zolo-form-error-msg', 'show');\n            }\n            if (successStatus) {\n              formNotice.innerHTML = successMessage;\n              formNoticeContainer.classList.add('zolo-form-success-msg', 'show');\n            }\n            if (failStatus) {\n              formNotice.innerHTML = failMessage;\n              formNoticeContainer.classList.add('zolo-form-error-msg', 'show');\n            }\n\n            // reset the form after submission\n            form.reset();\n\n            // remove the notice after 5 seconds\n            setTimeout(() => {\n              formNotice.innerHTML = '';\n              formNoticeContainer.classList.remove('validation-error', 'success', 'fail', 'show');\n            }, 5000);\n\n            // close the notice\n            closeBtn.addEventListener('click', function () {\n              formNotice.innerHTML = '';\n              formNoticeContainer.classList.remove('validation-error', 'success', 'fail', 'show');\n            });\n          } else {\n            console.error('Error:', xhr.statusText);\n          }\n        }\n      };\n\n      xhr.send('action=send_form_data&formData=' + encodeURIComponent(dataString));\n    }\n  });\n}\n\n"],"names":["document","addEventListener","zoloForms","querySelectorAll","length","forEach","form","reCaptcha","dataset","recaptcha","initializeFormWhenReady","retries","datePickerInput","querySelector","setupFormHandlers","setTimeout","formId","formNoticeContainer","parentNode","formNotice","closeBtn","pristine","Pristine","inputs","input","errorMessage","getAttribute","addValidator","value","classList","contains","trim","e","preventDefault","valid","validate","formData","FormData","values","entries","push","zoloSettings","zolo_nonce","formattedData","reduce","acc","key","name","dataString","JSON","stringify","xhr","XMLHttpRequest","open","ajaxurl","setRequestHeader","onreadystatechange","readyState","DONE","status","response","parse","responseText","validationStatus","validationMessage","successStatus","successMessage","failStatus","failMessage","nonceValidationFail","innerHTML","add","reset","remove","console","error","statusText","send","encodeURIComponent"],"sourceRoot":""}